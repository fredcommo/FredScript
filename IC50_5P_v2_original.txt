IC50.5P.v2 <- function(x, y, sd, W.coef=0.5, unit="nM", Title=""){

# Weighted by residuals

# Avec nlm
	# Fonction logistique 5P
		nlm.fit.5P <- function(bottom, top, xmid, scal, s,  X){
			Y.fit <-bottom+(top-bottom)/(1+10^((xmid-X)*scal))^s
			return(Y.fit)
			}

	# Fonction sce (somme carré résidus) avec pondérations
		sce.5P <- function(param, X, yobs, Weights, W.coef) {
			bottom <- param[1]
			top <- param[2]
			xmid <- param[3]
			scal <- param[4]
			s <- param[5]
			ytheo <- nlm.fit.5P(bottom, top, xmid, scal, s, X)
			residus <- yobs - ytheo
			Weights <- (1/(residus^2))^(W.coef)
			return(sum(Weights*(yobs - ytheo)^2))
			}

	# initialisation des valeurs
		if(y[1]<0.9){
			x <- c(-x[length(x)], x)
			y <- c(1, y)
			sd <- c(0, sd)
			}

		w.coef = W.coef
		bottom.ini = min(y); min(y)
		top.ini = max(y); max(y)
		xmid.ini = (max(x)+min(x))/2; xmid.ini
		z <- y/max(y)
		z[z==0] <- 0.01
		z[z==1] <- 0.99

		scal.ini = coef(lm(x~log(z/(1-z))))[2]
		scal.ini <- as.numeric(scal.ini); scal.ini
		s.ini = 1
		# weights <- (z*(1-z))^(w.coef)
		# weights <- weights/sum(weights)
		weights <- rep(1, length(y))		

		init <- c(bottom.ini, top.ini, xmid.ini, scal.ini, s.ini)
		best<-nlm(f = sce.5P, p = init, X = x, yobs = y, Weights=weights, W.coef=w.coef)						# calcul des paramètres

	# Récupération des paramètres
		best.bottom <- best$estimate[1]
		best.top <- best$estimate[2]
		best.xmid<-best$estimate[3]
		best.scal <- best$estimate[4]
		best.s <- best$estimate[5]

	# Estimation des valeurs
		newX <- seq(min(x)*0.75, max(x)*1.25, length=100)						
		Y.best <- nlm.fit.5P(best.bottom, best.top, best.xmid, best.scal, best.s, newX)

			# coordonnées du pt d'inflexion
				Xflex = best.xmid + (1/best.scal)*log10(best.s)
				Yflex = best.bottom + (best.top - best.bottom)*(best.s/(best.s+1))^best.s

			# coordonnées du pt rep = 0.5
				Y50 = 0.5
				X50 = best.xmid - 1/best.scal*log10(((best.top - best.bottom)/(Y50 - best.bottom))^(1/best.s)-1)

			# pente au pt d'inflexion
				# B = best.bottom + (best.top - best.bottom)*log(10)*(best.scal)*(best.s/(best.s+1))^(best.s+1); B	# + best.bottom 							# 5P	 	pour d=1, (d/(d+1))^(d+1) = 1/4
				B = log(10)*(best.scal)*(best.s/(best.s+1))^(best.s+1); B								# top = 1, bottom = 0
				A = Yflex  - B*(Xflex); A													# 5P		pour d=1, (d/(d+1))^d = 1/2
				print(c(bottom = best.bottom, 
						top = best.top,
						xmid = best.xmid,
						scal = best.scal,
						s = best.s,
						Xflex = Xflex, Yflex = Yflex,
						X50 = X50, D50 = round(10^X50, 2)))

	# Représentations graphiques
		plot(y~x, pch = 20, cex = 2.5, col = "indianred2", xlim = range(min(newX), max(newX)), ylim = range(0,max(y, Y.best)))
		pas = (max(x) - min(x))/20
		for(s in 1:length(sd)){
			segments(x0 = x[s], x1 = x[s], y0 = y[s]-sd[s], y1 = y[s]+sd[s], lty = 3)
			segments(x0 = x[s]-pas, x1 = x[s]+pas, y0 = y[s]-sd[s], y1 = y[s]-sd[s], lty = 3)
			segments(x0 = x[s]-pas, x1 = x[s]+pas, y0 = y[s]+sd[s], y1 = y[s]+sd[s], lty = 3)
			}
		lines(Y.best~newX, col = "royalblue3", lwd = 3)
		Sub = "Weighted 5P logistic regr."
		if(W.coef==0) Sub = "Non weighted 5P logistic regr."
		title (main = Title, sub = Sub)
		legend("bottomleft", legend = paste("IC50 :", round(10^X50, 2),unit), bty="n")
}
